register.php:
for student:
{
  "name": "Taylor Finch",
  "email": "taylor.finch@ucf.edu",
  "password": "Demo123!",
  "university": "University of Central Florida"
}

for admin or superadmin:
{
  "name": "Admin Person",
  "email": "admin@ucf.edu",
  "password": "AdminPass123",
  "university": "University of Central Florida",
  "role": "Admin" // change this to "SuperAdmin" for super admin
}

return message-
{
    "message": "User registered",
    "uid": 1
}

Note: role can be "Admin", "SuperAdmin". The standard itself for user is Student so it you want to send student in the role 
for a student registering that shouldn't matter. When the role "Admin" or "SuperAdmin" it will populate the user table like normal
but it will also add to the Admin or SuperAdmin Table respectively. 

login.php:
{
  "email": "taylor.finch@ucf.edu",
  "password": "Demo123!"
}

output message -
{
    "message": "Login successful",
    "uid": 1,
    "role": "Student",
    "university_id": 8
}

Admin or super admin:
{
  "email": "admin@ucf.edu",
  "password": "AdminPass123"
}

Output:
{
    "message": "Login successful",
    "uid": 2,
    "role": "Admin",
    "university_id": 8
}

create_rso.php:
{
    "name": "Future Lawyers",
    "description": "A student-led initiative promoting innovation and technology.",
    "university_id": 1,
    "admin_email": "steven.smith@ucf.edu",
    "member_emails": [
        "taylor.finch@ucf.edu",
        "barry.allen@ucf.edu",
        "jerry.springer@ucf.edu",
        "larry.david@ucf.edu"
    ]
}

Output:
{
    "success": true,
    "message": "RSO created and members added successfully."
}

join_rso.php:
{
  "user_id": 10,
  "rso_id": 3
}

Output:
{
  "success": true,
  "message": "Successfully joined the RSO."
}

join_rso.php
{
  "uid": 6, (user id)
  "rsoid": 8 (id of rso in rsos table)
}
Output-
{
    "success": true,
    "message": "Successfully joined the RSO."
}

create_event.php:
{
  "Event_Name": "Tech Talk",
  "Event_Description": "AI and the future",
  "Type": "RSO",
  "RSO": "Future Innovators",
  "Date": "2025-04-23",
  "Time": "7:30PM",
  "End_Date": "2025-04-23",
  "End_Time": "9:00 PM",
  "Location": "Engineering Hall 102",
  "Contact_Phone": "(555) 123-4567",
  "Contact_Email": "taylor.finch@ucf.edu",
  "User_ID": 1
}
{
    "success": true,
    "message": "Event created successfully."
}
- Make sure to show the user the error if success was false. The message will say the error

get_events.php:
{
  "type": "RSO",  (Can be "Public" or "Private" as well)
  "uid": 2 (User id from login)
}

Output:
[
    {
        "title": "Tech Talk",
        "description": "AI and the future",
        "event_time": "2025-04-03 19:30:00",
        "end_time": "2025-04-03 21:00:00",
        "location": "Engineering Hall 102",
        "contact_phone": "(555) 123-4567",
        "contact_email": "taylor.finch@ucf.edu",
        "rso_name": "Future Lawyers"
    },
    {
        "title": "Innovation Kickoff",
        "description": "A student-led initiative promoting innovation and technology.",
        "event_time": "2025-04-20 15:30:00",
        "end_time": "0000-00-00 00:00:00",
        "location": "Engineering Hall, Room 102",
        "contact_phone": "(407) 123-4567",
        "contact_email": "taylor.finch@ucf.edu",
        "rso_name": "Future Innovators"
    }
]

get_rsos.php:
{
  "uid": 1, (user id)
  "search": "inn" (search string)
}
Output-
{
  "success": true,
  "rsos": [
    {
      "rsoid": 2,
      "name": "Future Innovators",
      "description": "A student-led initiative promoting innovation and technology."
    },
    {
      "rsoid": 5,
      "name": "Innovation Hub",
      "description": "Exploring tech frontiers and creative design."
    }
  ]
}

show_comments.php:
Note: Put a button where you used to have join event for showing the comments to take to a comments page with a back button. 
This will return info for the comments. the comment id, uid of person who made the comment, comment text, and the timestamp. 
Use the comment id and uid for edit and delete comment. You can probably show buttons for edit and delete only if the 
uid of the comment matches the person who is logged in. 

{
  "event_id": 3 (id of event you are looking at the comments for)
}
Output-
{
    "success": true,
    "comments": [
        {
            "CommentID": 1,
            "UID": 2,
            "CommentText": "Excited for this event! Hope to meet fellow innovators.",
            "Timestamp": "2025-04-09 02:19:00"
        },
        {
            "CommentID": 2,
            "UID": 2,
            "CommentText": "Excited for this event! Hope to meet fellow innovators.",
            "Timestamp": "2025-04-09 02:19:05"
        }
    ]
}

add_comment.php:
{
  "uid": 2, (user id of person logged in)
  "event_id": 3, (event the comment is being made in)
  "comment_text": "Excited for this event! Hope to meet fellow innovators."
}
Output-
{
    "success": true,
    "message": "Comment added successfully."
}

edit_comment.php: edits a comment. use the comment id and user id of the person who is logged in. It is going to compare it
to the user id of the person who made the comment.
{
  "comment_id": 1,
  "uid": 2,
  "comment_text": "Can't wait to network with everyone!"
}
Output-
{
    "success": true,
    "message": "Comment updated."
}

delete_comment.php: removes from comment table. use the comment id and user id of the person logged in. It is going to compare it
to the user id of the person who made the comment.
{
  "comment_id": 1,
  "uid": 2
}
Output-
{
    "success": true,
    "message": "Comment deleted."
}